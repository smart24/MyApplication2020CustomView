package com.smart.myapplication2020customview.staticview.view_02_paint.view_08_stroke_shape;import android.content.Context;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.Path;import android.util.AttributeSet;import android.view.View;import androidx.annotation.Nullable;import com.smart.myapplication2020customview.R;/** * FileName: PaintStrokeShapeView * * Des: 线条形状 * *      1. setStrokeWidth(float width) *      2. setStrokeCap(Paint.Cap cap) *      3. setStrokeJoin(Paint.Join join) *      4. setStrokeMiter(float miter) * * Time: 2020/5/22 10:23 PM */public class PaintStrokeShapeView extends View {    private Paint mPaint;    private float mStrokeNarrow, mStrokeMiddle, mStrokeWide;    private float mWidth, mHeight;    private float mCenterX, mCenterY;    private float mRadius;    private Path mPath;    public PaintStrokeShapeView(Context context) {        this(context, null);    }    public PaintStrokeShapeView(Context context, @Nullable AttributeSet attrs) {        this(context, attrs, 0);    }    public PaintStrokeShapeView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init();    }    private void init() {        setLayerType(View.LAYER_TYPE_SOFTWARE, null);        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setTextAlign(Paint.Align.CENTER);        mPaint.setStyle(Paint.Style.STROKE);        mStrokeNarrow = getResources().getDimension(R.dimen.padding_micro_xx);        mStrokeMiddle = getResources().getDimension(R.dimen.padding_small);        mStrokeWide = getResources().getDimension(R.dimen.padding_medium);        mPath = new Path();    }    @Override    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        super.onSizeChanged(w, h, oldw, oldh);        mWidth = getMeasuredWidth();        mHeight = getMeasuredHeight();        mCenterX = mWidth / 2;        mCenterY = mHeight / 2;        mRadius = (mWidth < mHeight ? mWidth : mHeight) / 3 / 3;        mPath.moveTo((mCenterX - mRadius * 2), mCenterY);        mPath.lineTo((mCenterX + mRadius * 2), mCenterY);        mPath.lineTo((mCenterX + mRadius * 2), (mCenterY + mRadius * 4));        mPath.lineTo((mCenterX - mRadius * 2), mCenterY);        mPath.lineTo((mCenterX + mRadius * 2), mCenterY);    }    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        //1. setStrokeWidth(float width)//        mPaint.setStyle(Paint.Style.STROKE);//        mPaint.setStrokeWidth(mStrokeNarrow);//        canvas.drawCircle(mCenterX - mRadius * 2 - mRadius * 3/2/4, mCenterY, mRadius, mPaint);//        mPaint.setStrokeWidth(mStrokeMiddle);//        canvas.drawCircle(mCenterX, mCenterY, mRadius, mPaint);//        mPaint.setStrokeWidth(mStrokeWide);//        canvas.drawCircle(mCenterX + mRadius * 2 + mRadius * 3/2/4, mCenterY, mRadius, mPaint);////        mPaint.setColor(getResources().getColor(R.color.grey_800));//        mPaint.setStrokeWidth(mStrokeWide);//        canvas.drawCircle(mCenterX, mCenterY, mRadius * 2, mPaint);//        mPaint.setColor(getResources().getColor(R.color.white));//        mPaint.setStrokeWidth(mStrokeNarrow);//        canvas.drawCircle(mCenterX, mCenterY, mRadius * 2, mPaint);        //2. setStrokeCap(Paint.Cap cap)//        mPaint.setStrokeWidth(mStrokeWide);//        mPaint.setStrokeCap(Paint.Cap.BUTT);//        canvas.drawLine((mCenterX - mRadius * 2), (mCenterY - mRadius), (mCenterX + mRadius * 2), (mCenterY - mRadius), mPaint);//        mPaint.setStrokeCap(Paint.Cap.ROUND);//        canvas.drawLine((mCenterX - mRadius * 2), (mCenterY ), (mCenterX + mRadius * 2), (mCenterY ), mPaint);//        mPaint.setStrokeCap(Paint.Cap.SQUARE);//        canvas.drawLine((mCenterX - mRadius * 2), (mCenterY + mRadius), (mCenterX + mRadius * 2), (mCenterY + mRadius), mPaint);        //3. setStrokeJoin(Paint.Join join)        //需要注意的是：Paint.Join 只有绘制 Path 的时候才起作用        //3.1 绘制 Line：不起任何作用//        mPaint.setStrokeWidth(mStrokeWide);//        mPaint.setStrokeJoin(Paint.Join.MITER);//        mPaint.setStrokeJoin(Paint.Join.ROUND);//        mPaint.setStrokeJoin(Paint.Join.BEVEL);//        canvas.drawLine((mCenterX - mRadius * 2), (mCenterY), (mCenterX + mRadius * 2), (mCenterY), mPaint);//        canvas.drawLine((mCenterX + mRadius * 2), (mCenterY), (mCenterX + mRadius * 2), (mCenterY + mRadius * 4), mPaint);        //3.2 绘制 Path：起作用//        mPaint.setStrokeWidth(mStrokeWide);//        mPaint.setStrokeJoin(Paint.Join.MITER);//        mPaint.setStrokeJoin(Paint.Join.ROUND);//        mPaint.setStrokeJoin(Paint.Join.BEVEL);//        mPaint.setStrokeMiter(1); //180°//        mPaint.setStrokeMiter(2); //60°//        mPaint.setStrokeMiter(3); //38.94°//        canvas.drawPath(mPath, mPaint);        //4. setStrokeMiter(float miter)        //注意事项：只有当 Paint.Join 类型为 Paint.Join.MITER 的时候，StrokeMiter 的值才起作用        //        //Miter 值、角度对照表        //miter	angle        //10	11.48        //9	    12.76        //8	    14.36        //7	    16.43        //6	    19.19        //5	    23.07        //4	    28.96        //3	    38.94        //2	    60        //1	    180        //Miter 值计算方法：1/sin(θ/2)  → 1/sin(180/2) = 1        mPaint.setStrokeWidth(mStrokeWide);        //4.1 StrokeMiter 起作用        mPaint.setStrokeJoin(Paint.Join.MITER);        //4.2 StrokeMiter 不起作用//        mPaint.setStrokeJoin(Paint.Join.ROUND);//        mPaint.setStrokeJoin(Paint.Join.BEVEL);        //当两直线的夹角小于 180° 时，Paint.Join.MITER 转变为 Paint.Join.BEVEL//        mPaint.setStrokeMiter(1); //180°        //当两直线的夹角小于 60° 时，Paint.Join.MITER 转变为 Paint.Join.BEVEL        //此时，由于等腰直角三角形的两锐角为 45°，所以，直角三角形的两锐角 Paint.Join.MITER 转变为 Paint.Join.BEVEL，        //等腰直角三角形的直角不受影响        mPaint.setStrokeMiter(2); //60°        //当两直线的夹角小于 38.94° 时，Paint.Join.MITER 转变为 Paint.Join.BEVEL//        mPaint.setStrokeMiter(3); //38.94°        //当两直线的夹角小于 28.96° 时，Paint.Join.MITER 转变为 Paint.Join.BEVEL（默认值）//        mPaint.setStrokeMiter(4); //28.96°        canvas.drawPath(mPath, mPaint);    }}